/* NyxNode
 * Author: Jérôme ODIER <jerome.odier@lpsc.in2p3.fr>
 * SPDX-License-Identifier: GPL-2.0-only (Mongoose backend) or GPL-3.0+
 */

/*--------------------------------------------------------------------------------------------------------------------*/

#ifndef NYX_NODE_HPP
#define NYX_NODE_HPP

/*--------------------------------------------------------------------------------------------------------------------*/

#include <vector>
#include <memory>
#include <csignal>

#include "nyx_node.h"

/*--------------------------------------------------------------------------------------------------------------------*/
/* NyxDevice                                                                                                          */
/*--------------------------------------------------------------------------------------------------------------------*/

class NyxDevice
{
public:
    /*----------------------------------------------------------------------------------------------------------------*/

    virtual void initialize() = 0;

    virtual void finalize() = 0;

    /*----------------------------------------------------------------------------------------------------------------*/

    inline void add_vector(nyx_dict_t *vector)
    {
        m_vectors.push_back(vector);
    }

    /*----------------------------------------------------------------------------------------------------------------*/

    inline const std::vector<nyx_dict_t *> &vectors() const
    {
        return m_vectors;
    }

    /*----------------------------------------------------------------------------------------------------------------*/

private:
    /*----------------------------------------------------------------------------------------------------------------*/

    std::vector<nyx_dict_t *> m_vectors;

    /*----------------------------------------------------------------------------------------------------------------*/
};

/*--------------------------------------------------------------------------------------------------------------------*/
/* NyxDriver                                                                                                          */
/*--------------------------------------------------------------------------------------------------------------------*/

class NyxDriver
{
public:
    /*----------------------------------------------------------------------------------------------------------------*/

    int run()
    {
        /*------------------------------------------------------------------------------------------------------------*/

        nyx_memory_initialize();

        /*------------------------------------------------------------------------------------------------------------*/

        this->build();

        /*------------------------------------------------------------------------------------------------------------*/

        std::vector<nyx_dict_t *> vector_list;

        for(const auto &uptr: this->m_devices)
        {
            const auto &vecs = uptr->vectors();

            vector_list.insert(vector_list.end(), vecs.begin(), vecs.end());
        }

        vector_list.push_back(nullptr);

        /*------------------------------------------------------------------------------------------------------------*/

        static volatile sig_atomic_t s_signo = 0;

        auto handler = +[](int signo) {

            s_signo = signo;
        };

        std::signal(SIGINT, handler);
        std::signal(SIGTERM, handler);

        /*------------------------------------------------------------------------------------------------------------*/

        nyx_node_t *node = nyx_node_initialize(
            this->node_name(),
            vector_list.data(),
            this->tcp_uri(),
            this->mqtt_uri(),
            this->mqtt_username(),
            this->mqtt_password(),
            nullptr,
            this->redis_uri(),
            this->redis_username(),
            this->redis_password(),
            3000,
            true,
            true
        );

        while(s_signo == 0)
        {
            nyx_node_poll(node, this->node_timeout_ms());
        }

        nyx_node_finalize(node, true);

        /*------------------------------------------------------------------------------------------------------------*/

        this->m_devices.clear();

        /*------------------------------------------------------------------------------------------------------------*/

        nyx_memory_finalize();

        /*------------------------------------------------------------------------------------------------------------*/

        return 0;
    }

    /*----------------------------------------------------------------------------------------------------------------*/

protected:
    /*----------------------------------------------------------------------------------------------------------------*/

    virtual void build() = 0;

    /*----------------------------------------------------------------------------------------------------------------*/

    virtual STR_t node_name() const = 0;

    virtual STR_t tcp_uri()  const = 0;

    virtual STR_t mqtt_uri() const = 0;

    virtual STR_t redis_uri() const = 0;

    virtual STR_t mqtt_username() const = 0;

    virtual STR_t mqtt_password() const = 0;

    virtual STR_t redis_username() const = 0;

    virtual STR_t redis_password() const = 0;

    virtual int node_timeout_ms() const = 0;

    /*----------------------------------------------------------------------------------------------------------------*/

    inline void register_device(std::unique_ptr<NyxDevice> dev)
    {
        this->m_devices.emplace_back(std::move(dev));
    }

    /*----------------------------------------------------------------------------------------------------------------*/

private:
    /*----------------------------------------------------------------------------------------------------------------*/

    std::vector<std::unique_ptr<NyxDevice>> m_devices;

    /*----------------------------------------------------------------------------------------------------------------*/
};

/*--------------------------------------------------------------------------------------------------------------------*/

#endif /* NYX_NODE_HPP */

/*--------------------------------------------------------------------------------------------------------------------*/
