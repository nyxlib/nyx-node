/* NyxNode
 * Author: Jérôme ODIER <jerome.odier@lpsc.in2p3.fr>
 * SPDX-License-Identifier: GPL-2.0-only (Mongoose backend) or GPL-3.0+
 */

/*--------------------------------------------------------------------------------------------------------------------*/

#ifndef NYX_NODE_HPP
#define NYX_NODE_HPP

/*--------------------------------------------------------------------------------------------------------------------*/

#include <vector>
#include <memory>
#include <csignal>

#include "nyx_node.h"

/*--------------------------------------------------------------------------------------------------------------------*/

namespace Nyx {

/*--------------------------------------------------------------------------------------------------------------------*/
/* BaseDevice                                                                                                         */
/*--------------------------------------------------------------------------------------------------------------------*/

class BaseDevice
{
public:

    /*----------------------------------------------------------------------------------------------------------------*/

    virtual ~BaseDevice() = default;

    /*----------------------------------------------------------------------------------------------------------------*/

    virtual void initialize() = 0;

    virtual void finalize() = 0;

    /*----------------------------------------------------------------------------------------------------------------*/

    virtual STR_t name() const = 0;

    /*----------------------------------------------------------------------------------------------------------------*/

    inline void registerVector(nyx_dict_t *vector)
    {
        m_vectors.push_back(vector);
    }

    /*----------------------------------------------------------------------------------------------------------------*/

    inline const std::vector<nyx_dict_t *> &vectors() const
    {
        return m_vectors;
    }

    /*----------------------------------------------------------------------------------------------------------------*/

private:
    /*----------------------------------------------------------------------------------------------------------------*/

    std::vector<nyx_dict_t *> m_vectors;

    /*----------------------------------------------------------------------------------------------------------------*/
};

/*--------------------------------------------------------------------------------------------------------------------*/
/* BaseDriver                                                                                                         */
/*--------------------------------------------------------------------------------------------------------------------*/

class BaseDriver
{
public:
    /*----------------------------------------------------------------------------------------------------------------*/

    virtual ~BaseDriver() = default;

    /*----------------------------------------------------------------------------------------------------------------*/

    int run()
    {
        /*------------------------------------------------------------------------------------------------------------*/

        nyx_memory_initialize();

        /*------------------------------------------------------------------------------------------------------------*/

        this->initialize();

        /*------------------------------------------------------------------------------------------------------------*/

        std::vector<nyx_dict_t *> vectors;

        for(const auto &uptr: this->m_devices)
        {
            const auto &subVectors = uptr->vectors();

            vectors.insert(vectors.end(), subVectors.begin(), subVectors.end());
        }

        /*------------------------------------------------------------------------------------------------------------*/

        vectors.push_back(nullptr);

        /*------------------------------------------------------------------------------------------------------------*/

        static volatile sig_atomic_t s_signo = 0;

        auto handler = +[](int signo) {

            s_signo = signo;
        };

        std::signal(SIGINT, handler);
        std::signal(SIGTERM, handler);

        /*------------------------------------------------------------------------------------------------------------*/

        nyx_node_t *node = nyx_node_initialize(
            this->name(),
            vectors.data(),
            this->tcpURI(),
            this->mqttURI(),
            this->mqttUsername(),
            this->mqttPassword(),
            nullptr,
            this->redisURI(),
            this->redisUsername(),
            this->redisPassword(),
            3000,
            true,
            false
        );

        while(s_signo == 0)
        {
            nyx_node_poll(node, this->nodeTimeoutMS());
        }

        nyx_node_finalize(node, true);

        /*------------------------------------------------------------------------------------------------------------*/

        this->m_devices.clear();

        /*------------------------------------------------------------------------------------------------------------*/

        this->finalize();

        /*------------------------------------------------------------------------------------------------------------*/

        nyx_memory_finalize();

        /*------------------------------------------------------------------------------------------------------------*/

        return 0;
    }

    /*----------------------------------------------------------------------------------------------------------------*/

protected:
    /*----------------------------------------------------------------------------------------------------------------*/

    virtual void initialize() = 0;

    virtual void finalize() = 0;

    /*----------------------------------------------------------------------------------------------------------------*/

    virtual STR_t name() const = 0;

    /*----------------------------------------------------------------------------------------------------------------*/

    virtual STR_t tcpURI() const = 0;

    virtual STR_t mqttURI() const = 0;
    virtual STR_t mqttUsername() const = 0;
    virtual STR_t mqttPassword() const = 0;

    virtual STR_t redisURI() const = 0;
    virtual STR_t redisUsername() const = 0;
    virtual STR_t redisPassword() const = 0;

    virtual int nodeTimeoutMS() const = 0;

    /*----------------------------------------------------------------------------------------------------------------*/

    inline void registerDevice(std::unique_ptr<BaseDevice> device)
    {
        this->m_devices.emplace_back(std::move(device));
    }

    /*----------------------------------------------------------------------------------------------------------------*/

private:
    /*----------------------------------------------------------------------------------------------------------------*/

    std::vector<std::unique_ptr<BaseDevice>> m_devices;

    /*----------------------------------------------------------------------------------------------------------------*/
};

/*--------------------------------------------------------------------------------------------------------------------*/

} /* namespace Nyx */

/*--------------------------------------------------------------------------------------------------------------------*/

#endif /* NYX_NODE_HPP */

/*--------------------------------------------------------------------------------------------------------------------*/
